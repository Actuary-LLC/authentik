version: "3.9"

services:
  redis:
    image: redis:alpine
    container_name: authentik_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      - reverse-proxy
    #volumes:
    #  - authentik_redis:/data
  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.2.2}
    container_name: authentik_server
  #  restart: unless-stopped
    command: server
    networks:
      - reverse-proxy
    #volumes:
    #  - "$DOCKERDIR/apps/authentik/media:/media"
    #  - "$DOCKERDIR/apps/authentik/custom-templates:/templates"
    #  - "$DOCKERDIR/apps/authentik/geoip/data:/geoip"
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=external_postgres
      - AUTHENTIK_POSTGRESQL__NAME=authentik_db
      - AUTHENTIK_POSTGRESQL__USER=postgres_user
      - AUTHENTIK_POSTGRESQL__PASSWORD=postgres_password
      - AUTHENTIK_EMAIL__PASSWORD
      - AUTHENTIK_ERROR_REPORTING__ENABLED
      - AUTHENTIK_SECRET_KEY=test
      - AUTHENTIK_COOKIE_DOMAIN
      # - WORKERS
    #secrets:
    #  - authentik_postgresql_db=authentik_db
    #  - authentik_postgresql_user=postgres_user
    #  - authentik_postgresql_password=postgres_password
     # - authelia_notifier_smtp_password
    #  - authentik_secret_key=test
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authentik-rtr.rule=Host(`authentik.actuary.dev`)"
      - "traefik.http.routers.authentik-rtr.entrypoints=websecure"
      - "traefik.http.routers.authentik-rtr.tls=true"
      - "traefik.http.routers.authentik-rtr.tls.certresolver=myresolver"
      ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)  
      - "traefik.http.routers.authentik-rtr-outpost.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.actuary.dev`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-rtr-outpost.entrypoints=websecure"
      - "traefik.http.routers.authentik-rtr-outpost.tls=true"
      - "traefik.http.routers.authentik-rtr-outpost.tls.certresolver=myresolver"
      ## HTTP Services
      - "traefik.http.routers.authentik-rtr.service=authentik-svc"
      - "traefik.http.services.authentik-svc.loadBalancer.server.port=9000"
  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.2.2}
    container_name: authentik_worker
  #  restart: unless-stopped
    command: worker
    networks:
      - reverse-proxy
    #volumes:
    #  - "authentik_media:/media"
    #  - "authentik_templates:/templates"
    #  - "authentik_geoip:/geoip"
    #environment:
    #  - AUTHENTIK_REDIS__HOST
    #  - AUTHENTIK_POSTGRESQL__HOST
    #  - AUTHENTIK_POSTGRESQL__NAME
    #  - AUTHENTIK_POSTGRESQL__USER
    #  - AUTHENTIK_POSTGRESQL__PASSWORD
    #  - AUTHENTIK_EMAIL__PASSWORD
    #  - AUTHENTIK_ERROR_REPORTING__ENABLED
    #  - AUTHENTIK_SECRET_KEY
    #  - AUTHENTIK_COOKIE_DOMAIN
      # - WORKERS
    #secrets:
     # - authentik_postgresql_db
     # - authentik_postgresql_user
     # - authentik_postgresql_password
     # - authelia_notifier_smtp_password
     # - authentik_secret_key
  postgres:
    image: postgres:latest
    #user: "999:999"
    #user: "1000:100"
    user: "root"
    #user: "99:100"
    restart: unless-stopped
    #healthcheck:
    #  test: ["CMD-SHELL", "pg_isready -d authentik_db -U nm-iodin"]
    #  start_period: 20s
    #  interval: 30s
    #  retries: 5
    #  timeout: 5s
    volumes:
      #-  /mnt/user/services/authentik/postgres:/var/lib/postgresql/data
      -  /mnt/user/postgres:/var/lib/postgresql/data
    #  -  /etc/passwd:/etc/passwd
      #-  /mnt/user/services/authentik/postgres/config:/etc/postgresql
     # -  /mnt/user/services/authentik/:/unraid
     # -  postgresTest:/var/lib/postgresql/data 
    environment:
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_USER: postgres_user
      POSTGRES_DB: authentik_db
      PGDATA: /var/lib/postgresql/data/pgdata
    
networks:
  reverse-proxy:
    external: true

volumes:
  postgresTest:
  authentik_postgres:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=unraid.lan,rw,hard"
      device: ":/mnt/user/services/authentik/postgres"
